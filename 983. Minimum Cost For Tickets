class Solution {
public:
    int solve(vector<int>& days, vector<int>& costs, int n, int i, vector<int>& memo) {
        if (i >= n) {
            return 0;
        }
        if (memo[i] != -1) {
            return memo[i];
        }

        // 1-day pass
        int cost_1 = costs[0] + solve(days, costs, n, i + 1, memo);

        // 7-day pass
        int j = i;
        int max_days = days[i] + 7;
        while (j < n && days[j] < max_days) {
            j++;
        }
        int cost_7 = costs[1] + solve(days, costs, n, j, memo);

        // 30-day pass
        j = i;
        max_days = days[i] + 30;
        while (j < n && days[j] < max_days) {
            j++;
        }
        int cost_30 = costs[2] + solve(days, costs, n, j, memo);

        memo[i] = min({cost_1, cost_7, cost_30});
        return memo[i];
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        int n = days.size();
        vector<int> memo(n, -1);
        return solve(days, costs, n, 0, memo);
    }
};
