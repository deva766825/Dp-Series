class Solution {
public:
    int t[1001][1001];
    int findfun(string& text1,string& text2,int i,int j)
    {   
        if(i<0||j<0)
            return 0;
        if(t[i][j]!=-1)
        {
            return t[i][j];
        }
        if(text1[i]==text2[j])
             t[i][j]= 1+findfun(text1,text2,i-1,j-1);
        else 
             t[i][j]= max(findfun(text1,text2,i-1,j),findfun(text1,text2,i,j-1));
       
       return  t[i][j];
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size();
        int m=text2.size();
        int res;
        memset(t,-1,sizeof(t));
        res=findfun(text1,text2,n-1,m-1);
    return res;
    }
};


OR 

class Solution {
public:
    
    int findfun(string& text1,string& text2,int i,int j,vector<vector<int>>& dp)
    {   
        if(i<0||j<0)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(text1[i]==text2[j])
            dp[i][j]=1+findfun(text1,text2,i-1,j-1,dp);
        else 
            dp[i][j]=max(findfun(text1,text2,i-1,j,dp),findfun(text1,text2,i,j-1,dp));
        return dp[i][j];
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n=text1.size();
        int m=text2.size();
        int res;
        vector<vector<int>> dp(n, vector<int>(m, -1));
        res=findfun(text1,text2,n-1,m-1,dp);
    return res;
    }
};

OR

//Tabulation
class Solution {
public:
    int longestCommonSubsequence(string s1, string s2) {
          int n = s1.size();
    int m = s2.size();

    vector<vector<int>> dp(n + 1, vector<int>(m + 1, -1)); // Create a DP table

    // Initialize the base cases
    for (int i = 0; i <= n; i++) {
        dp[i][0] = 0;
    }
    for (int i = 0; i <= m; i++) {
        dp[0][i] = 0;
    }

    // Fill in the DP table to calculate the length of LCS
    for (int ind1 = 1; ind1 <= n; ind1++) {
        for (int ind2 = 1; ind2 <= m; ind2++) {
            if (s1[ind1 - 1] == s2[ind2 - 1])
                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1]; // Characters match, increment LCS length
            else
                dp[ind1][ind2] = max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]); // Characters don't match, consider the maximum from left or above
        }
    }

    return dp[n][m];
    }
};
